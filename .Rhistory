library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP line02 slider.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
runApp('APP Layout05 reactivevalue.R')
runApp('APP Layout05 reactivevalue.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN05 gameslider1.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/SUBMIT/OLYMPICS MAIN APP.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN07 bootstrap.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN08 host rank.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('APP MAIN12 histo reactive.R')
library(shiny); runApp('APP MAIN12 histo reactive.R')
setwd("F:/MONASH/Data Visualization/Ass/Ass1")
runApp('APP MAIN12 histo reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('APP MAIN12 histo reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN12 histo reactive.R')
setwd("F:/MONASH/Data Visualization/Ass/Ass3/Olympicsvizz")
library(shiny); runApp('APP MAIN17 piecharttest.R')
runApp('APP MAIN17 piecharttest.R')
library(shiny); runApp('APP MAIN17 piecharttest.R')
# Clean the data object
library(dplyr)
library(leaflet)
# Read shape file with the rgdal library.
library(rgdal)
# world spatial polygon data frame
world_spdf <- readOGR(paste0(getwd(),"\\data\\world_shape_file\\"),
"TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Loading athlete data
summer_olympic <- read.csv(paste0(getwd(),"/DATA/summer_olympics.csv"))
# Calculate BMI
summer_olympic$BMI <- summer_olympic$Weight / ((summer_olympic$Height / 100) ^ 2)
# Loading alphabetic country codes data
country_code <- read.csv(paste0(getwd(),"/DATA/alphabetic_country_codes.csv"))
# join athlete data with country codes to add iso3 country code
summer_olympic <-  merge(x = summer_olympic, y = country_code, by = "NOC", all = FALSE)
# put reactive to dataframe so we can subset in the next step
filtered_data <- summer_olympic
##----Preparing world spdf for filtering------------------------------------
# https://statisticsglobe.com/mean-by-group-in-r
# filter age data from na value, then create dataframe for each noc age mean rounded 2 decimal
filter_age <- filtered_data[!is.na(filtered_data$Age),]
if (nrow(filter_age) > 0) {
age_per_noc <- aggregate(Age ~ ISO, data = filter_age, FUN = function(x) round(mean(x), 2))
} else {
age_per_noc <- data.frame(ISO = character(), Age = numeric())
}
# filter height data from na value, then create dataframe for each noc height mean rounded 2 decimal
filter_height <- filtered_data[!is.na(filtered_data$Height),]
if (nrow(filter_height) > 0) {
height_per_noc <- aggregate(Height ~ ISO, data = filter_height, FUN = function(x) round(mean(x), 2))
} else {
height_per_noc <- data.frame(ISO = character(), Height = numeric())
}
# filter weight data from na value, then create dataframe for each noc weight mean rounded 2 decimal
filter_weight <- filtered_data[!is.na(filtered_data$Weight),]
if (nrow(filter_weight) > 0) {
weight_per_noc <- aggregate(Weight ~ ISO, data = filter_weight, FUN = function(x) round(mean(x), 2))
} else {
weight_per_noc <- data.frame(ISO = character(), Weight = numeric())
}
# filter bmi data from na value, then create dataframe for each noc bmi mean rounded 2 decimal
filter_bmi <- filtered_data[!is.na(filtered_data$BMI),]
if (nrow(filter_bmi) > 0) {
bmi_per_noc <- aggregate(BMI ~ ISO, data = filter_bmi, FUN = function(x) round(mean(x), 2))
} else {
bmi_per_noc <- data.frame(ISO = character(), BMI = numeric())
}
# Calculate the count of medals by team
medal_counts <- filtered_data %>%
group_by(ISO, Medal) %>%
summarize(Count = n()) %>%
pivot_wider(names_from = Medal, values_from = Count, values_fill = 0)
# Add a new column for total medal count
medal_counts <- medal_counts %>%
mutate(
# add with if there is no of gold, silver or bronze column then 0
Total_Medals = ifelse("Bronze" %in% names(.), Bronze, 0) +
ifelse("Gold" %in% names(.), Gold, 0) +
ifelse("Silver" %in% names(.), Silver, 0)
)
# try putting count data to spatial
world_spdf@data = data.frame(world_spdf@data, age_per_noc[match(world_spdf@data[["ISO3"]], age_per_noc[["ISO"]]),],
height_per_noc[match(world_spdf@data[["ISO3"]], height_per_noc[["ISO"]]),],
weight_per_noc[match(world_spdf@data[["ISO3"]], weight_per_noc[["ISO"]]),],
bmi_per_noc[match(world_spdf@data[["ISO3"]], bmi_per_noc[["ISO"]]),],
medal_counts[match(world_spdf@data[["ISO3"]], medal_counts[["ISO"]]),])
head(world_spdf@data)
medal_counts
View(medal_counts)
View(world_spdf)
world_spdf@data[is.na(world_spdf@data)] <- 0
View(world_spdf)
world_spdf@data$Gold
runApp('APP MAIN17 piecharttest.R')
runApp('APP MAIN17 piecharttest.R')
runApp('APP MAIN17 piecharttest.R')
runApp('APP MAIN17 piecharttest.R')
minitest_data = read.csv("DATA/sales_minichart.csv",header=TRUE)
colors = c("#FF0000", "#428EF4")
basemap = leaflet() %>%
addTiles() %>%
addProviderTiles(providers$OpenStreetMap.DE) %>%
setView(-98,38.5,zoom=2)
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_sensors,sales_pumps),
colorPalette = colors,
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_pumps),
colorPalette = colors,
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
colors = c("#FF0000", "#FF0000")
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_pumps),
colorPalette = colors,
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
colors = c("#FF0000")
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_pumps),
colorPalette = colors,
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
colors = "#FF0000"
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_pumps),
colorPalette = colors,
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
colors = c("#FF0000", "#428EF4")
palete <- colors[1]
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_sensors),
colorPalette = palete,
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_sensors),
colorPalette = "#FF0000",
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_sensors),
colorPalette = c("#FF0000"),
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
colors = c("#FF0000", "#428EF4")
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_sensors),
fillColor = "#FF0000",
colorPalette = colors,
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_sensors,sales_pumps),
fillColor = "#FF0000",
colorPalette = colors,
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_sensors,sales_pumps),
fillColor = colors,
colorPalette = colors,
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_sensors),
fillColor = colors,
colorPalette = colors,
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
basemap %>%
addMinicharts(
minitest_data$longitude, minitest_data$latitude,
type = "pie",
chartdata = select(minitest_data,sales_sensors,sales_pumps),
fillColor = colors,
colorPalette = colors,
width = 60 * sqrt(minitest_data$sales_total) / sqrt(max(minitest_data$sales_total)), transitionTime = 0
)
runApp('APP MAIN17 piecharttest.R')
runApp('APP MAIN17 piecharttest.R')
runApp('OLYMPICS MAIN APP.R')
runApp('OLYMPICS MAIN APP.R')
runApp('OLYMPICS MAIN APP.R')
runApp('OLYMPICS MAIN APP.R')
runApp('OLYMPICS MAIN APP.R')
# Create a sample dataset
data <- rnorm(100)
# Create the Plotly histogram
plot <- plot_ly(x = ~data, type = "histogram", text = ~paste("Value: ", data)) %>%
layout(title = "Histogram with Custom Popup",
xaxis = list(title = "Value"),
yaxis = list(title = "Frequency"),
hovermode = "closest")
# Display the plot
plot
# Create the Plotly histogram with custom popup text
plot <- plot_ly(x = ~data, type = "histogram",
hovertemplate = ~paste("Min bin: ", lower.bin.edge, "</br> Max bin: ", upper.bin.edge, "</br> Count: ", count)) %>%
layout(title = "Histogram with Custom Popup",
xaxis = list(title = "Value"),
yaxis = list(title = "Frequency"),
hovermode = "closest")
# Display the plot
plot
# Create the Plotly histogram
plot <- plot_ly(x = ~data, type = "histogram", text = ~paste("Min bin: ", lower.bin.edge, "</br> Max bin: ", upper.bin.edge, "</br> Count: ", count)) %>%
layout(title = "Histogram with Custom Popup",
xaxis = list(title = "Value"),
yaxis = list(title = "Frequency"),
hovermode = "closest")
# Display the plot
plot
# Create a sample dataset
data <- rnorm(100)
# Calculate the histogram manually to obtain the bin edges
hist_data <- hist(data, plot = FALSE)
bin_edges <- hist_data$breaks
# Create the Plotly histogram with custom popup text
plot <- plot_ly(x = ~data, type = "histogram",
hovertemplate = ~paste("Min bin: ", bin_edges[.data$bin.x], "</br> Max bin: ", bin_edges[.data$bin.x + 1], "</br> Count: ", .data$count)) %>%
layout(title = "Histogram with Custom Popup",
xaxis = list(title = "Value"),
yaxis = list(title = "Frequency"),
hovermode = "closest")
# Display the plot
plot
# Create a sample dataset
data <- rnorm(100)
# Set the number of bins for the histogram
num_bins <- 10
# Calculate the bin indices using cut()
bin_indices <- cut(data, breaks = num_bins, labels = FALSE)
# Create the Plotly histogram with custom popup text
plot <- plot_ly(x = ~data, type = "histogram",
hovertemplate = ~paste("Min bin: ", min(data[bin_indices == .data$x]), "</br> Max bin: ", max(data[bin_indices == .data$x]), "</br> Count: ", sum(bin_indices == .data$x))) %>%
layout(title = "Histogram with Custom Popup",
xaxis = list(title = "Value"),
yaxis = list(title = "Frequency"),
hovermode = "closest")
# Display the plot
plot
runApp('OLYMPICS MAIN APP.R')
