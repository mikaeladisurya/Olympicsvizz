library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP line02 slider.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
runApp('APP Layout05 reactivevalue.R')
runApp('APP Layout05 reactivevalue.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN05 gameslider1.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/SUBMIT/OLYMPICS MAIN APP.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN07 bootstrap.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN08 host rank.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('APP MAIN12 histo reactive.R')
library(shiny); runApp('APP MAIN12 histo reactive.R')
setwd("F:/MONASH/Data Visualization/Ass/Ass1")
runApp('APP MAIN12 histo reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('APP MAIN12 histo reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN12 histo reactive.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN14 filter country selectize.R')
# Loading athlete data
summer_olympic <- read.csv(paste0(getwd(),"/DATA/summer_olympics.csv"))
setwd("F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat")
# Loading athlete data
summer_olympic <- read.csv(paste0(getwd(),"/DATA/summer_olympics.csv"))
View(summer_olympic)
runApp('APP MAIN14 filter country selectize.R')
runApp('APP MAIN14 filter country selectize.R')
runApp('APP MAIN14 filter country selectize.R')
runApp('APP MAIN14 filter country selectize.R')
install.packages("DT")
runApp('APP MAIN14 filter country selectize.R')
runApp('APP MAIN15 filter country selectize.R')
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(leaflet)
library(plotly)
library(dplyr)
library(tidyverse)
library(rgdal)
library(DT)
##----Prepare dataframe-------------------------------------------------------
# world spatial polygon data frame
world_spdf <- readOGR(paste0(getwd(),"\\DATA\\world_shape_file\\"),
"TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Loading athlete data
summer_olympic <- read.csv(paste0(getwd(),"/DATA/summer_olympics.csv"))
# Calculate BMI
summer_olympic$BMI <- summer_olympic$Weight / ((summer_olympic$Height / 100) ^ 2)
# Loading alphabetic country codes data
country_code <- read.csv(paste0(getwd(),"/DATA/alphabetic_country_codes.csv"))
# join athlete data with country codes to add iso3 country code
summer_olympic <-  merge(x = summer_olympic, y = country_code, by = "NOC", all.x = TRUE)
# Loading host_medal data
host_country <- read.csv(paste0(getwd(),"/DATA/host_medal.csv"))
# Add a new column with the difference as host and before it
host_country$cbronze_diff <- host_country$bronze_as_host - host_country$bronze_b_host
host_country$csilver_diff <- host_country$silver_as_host - host_country$silver_b_host
host_country$cgold_diff <- host_country$gold_as_host - host_country$gold_b_host
host_country$cmedal_diff <- host_country$medal_as_host - host_country$medal_b_host
host_country$rbronze_diff <- host_country$rbronze_b_host - host_country$rbronze_as_host
host_country$rsilver_diff <- host_country$rsilver_b_host - host_country$rsilver_as_host
host_country$rgold_diff <- host_country$rgold_b_host - host_country$rgold_as_host
host_country$rmedal_diff <- host_country$rmedal_b_host - host_country$rmedal_as_host
##----Prepare dataframe for medal count and rank for each country-------------
# medal per country in each games
medal_per_country <- summer_olympic %>%    # Applying group_by & summarise
group_by(NOC, Year) %>%
summarise(cmedal = sum(!is.na(Medal)),
cgold = sum(Medal == "Gold", na.rm = TRUE),
csilver = sum(Medal == "Silver", na.rm = TRUE),
cbronze = sum(Medal == "Bronze", na.rm = TRUE))
# rank by medal
medal_per_country <- medal_per_country %>%    # Applying group_by & summarise
group_by(Year) %>%
mutate(rmedal = ceiling(rank(-cmedal)),
rgold = ceiling(rank(-cgold)),
rsilver = ceiling(rank(-csilver)),
rbronze = ceiling(rank(-cbronze)))
# Calculate the average medal count for each game
medal_avg_country <- medal_per_country %>%
group_by(Year) %>%
summarize(cmedal_avg = round(mean(cmedal), 2),
cgold_avg = round(mean(cgold), 2),
csilver_avg = round(mean(csilver), 2),
cbronze_avg = round(mean(cbronze), 2),
rmedal_avg = round(mean(rmedal), 2),
rgold_avg = round(mean(rgold), 2),
rsilver_avg = round(mean(rsilver), 2),
rbronze_avg = round(mean(rbronze), 2))
host_country <- merge(x = host_country, y = medal_avg_country, by = "Year", all.x = TRUE)
filtered_data <- summer_olympic[!is.na(summer_olympic$Medal),]
# Calculate the count of medals by team
medal_counts <- filtered_data %>%
group_by(ISO, Medal) %>%
summarize(Count = n()) %>%
pivot_wider(names_from = Medal, values_from = Count, values_fill = 0)
if (input$medal == "All Medals") {
# Add a new column for total medal count
medal_counts <- medal_counts %>%
mutate(Total_Medals = Bronze + Gold + Silver)
}
medal_counts <- medal_counts %>%
mutate(Total_Medals = Bronze + Gold + Silver)
View(medal_counts)
runApp('APP MAIN13 choro reactive.R')
runApp('APP MAIN15 filter country selectize.R')
sport_data <- filtered_data[filtered_data$Sport %in% input$sport, ]
sport_data <- filtered_data[filtered_data$Sport %in% "Archery", ]
View(sport_data)
country_data <- sport_data[sport_data$NOC %in% "AUS", ]
View(country_data)
# Calculate the count of medals by team
filter_counts <- country_data %>%
group_by(ISO, Medal) %>%
summarize(Count = n()) %>%
pivot_wider(names_from = Medal, values_from = Count, values_fill = 0)
View(filter_counts)
filter_counts <- filter_counts %>%
mutate(Total_Medals = Bronze + Gold + Silver)
filter_counts <- filter_counts %>%
mutate(Total_Medals = Bronze + Gold + ifelse(is.null(Silver), 0, Silver)
)
filter_counts <- filter_counts %>%
mutate(Total_Medals = Bronze + Gold + ifelse(exists(Silver), Silver, 0)
)
filter_counts <- filter_counts %>%
mutate(
Total_Medals = Bronze + Gold + ifelse(!is.null(Silver), Silver, 0)
)
filter_counts <- filter_counts %>%
mutate(
Total_Medals = Bronze + Gold + coalesce(Silver, 0)
)
filter_counts <- filter_counts %>%
mutate(
Total_Medals = Bronze + Gold + ifelse("Silver" %in% names(.), Silver, 0)
)
View(filter_counts)
# Calculate the count of medals by team
filter_counts <- country_data %>%
group_by(ISO, Medal) %>%
summarize(Count = n()) %>%
pivot_wider(names_from = Medal, values_from = Count, values_fill = 0)
View(filter_counts)
filter_counts <- filter_counts %>%
mutate(
Total_Medals = ifelse("Bronze" %in% names(.), Bronze, 0) +
ifelse("Gold" %in% names(.), Gold, 0) +
ifelse("Silver" %in% names(.), Silver, 0)
)
View(filter_counts)
runApp('APP MAIN15 filter country selectize.R')
View(country_data)
# Calculate the count of medals by team
filter_counts <- country_data %>%
group_by(ISO, Medal) %>%
summarize(Count = n()) %>%
pivot_wider(names_from = Medal, values_from = Count, values_fill = 0)
View(filter_counts)
country_data <- sport_data[sport_data$NOC %in% "BEL", ]
# Calculate the count of medals by team
filter_counts <- country_data %>%
group_by(ISO, Medal) %>%
summarize(Count = n()) %>%
pivot_wider(names_from = Medal, values_from = Count, values_fill = 0)
View(filter_counts)
filter_height <- country_data[!is.na(country_data$Height),]
View(filter_height)
height_per_noc <- aggregate(Height ~ ISO, data = filter_height, FUN = function(x) round(mean(x), 2))
height_per_noc <- data.frame(ISO = character(), Height = numeric())
View(height_per_noc)
country_data <- sport_data[sport_data$NOC %in% "AUS", ]
filter_height <- country_data[!is.na(country_data$Height),]
height_per_noc <- aggregate(Height ~ ISO, data = filter_height, FUN = function(x) round(mean(x), 2))
View(height_per_noc)
runApp('APP MAIN15 filter country selectize.R')
runApp('APP select choicename.R')
runApp('APP select choicename.R')
runApp('APP select choicename.R')
runApp('APP select choicename.R')
runApp('APP MAIN16 select valuenames.R')
View(country_data)
View(filter_height)
height_per_noc <- aggregate(Height ~ ISO, data = filter_height, FUN = function(x) round(mean(x), 2))
View(height_per_noc)
height_per_noc <- aggregate(Height ~ ISO, data = filter_height, FUN = function(x) round(mean(x), 2))
View(height_per_noc)
country_data <- sport_data[sport_data$NOC %in% "EUN", ]
View(country_data)
country_data <- sport_data[sport_data$NOC %in% "EUN", ]
filter_height <- country_data[!is.na(country_data$Height),]
height_per_noc <- aggregate(Height ~ ISO, data = filter_height, FUN = function(x) round(mean(x), 2))
filter_height <- country_data[!is.na(country_data$Height),]
height_per_noc <- aggregate(Height ~ ISO, data = filter_height, FUN = function(x) round(mean(x), 2))
# Loading athlete data
summer_olympic <- read.csv(paste0(getwd(),"/DATA/summer_olympics.csv"))
# Calculate BMI
summer_olympic$BMI <- summer_olympic$Weight / ((summer_olympic$Height / 100) ^ 2)
# Loading alphabetic country codes data
country_code <- read.csv(paste0(getwd(),"/DATA/alphabetic_country_codes.csv"))
# join athlete data with country codes to add iso3 country code
summer_olympic <-  merge(x = summer_olympic, y = country_code, by = "NOC", all.x = TRUE)
# delete NA row in ISO column
summer_olympic <- summer_olympic[!is.na(summer_olympic$ISO),]
#--------------------------------------------- Cari error kalo ngga ada kolom
filtered_data <- summer_olympic[!is.na(summer_olympic$Medal),]
sport_data <- filtered_data[filtered_data$Sport %in% "Archery", ]
country_data <- sport_data[sport_data$NOC %in% "EUN", ]
filter_height <- country_data[!is.na(country_data$Height),]
height_per_noc <- aggregate(Height ~ ISO, data = filter_height, FUN = function(x) round(mean(x), 2))
View(filter_height)
if (nrow(filter_height) > 0) {
height_per_noc <- aggregate(Height ~ ISO, data = filter_height, FUN = function(x) round(mean(x), 2))
} else {
height_per_noc <- data.frame(ISO = character(), Height = numeric())
}
country_data <- sport_data[sport_data$NOC %in% "EUN", ]
height_per_noc <- aggregate(Height ~ ISO, data = filter_height, FUN = function(x) round(mean(x), 2))
#--------------------------------------------- Cari error kalo ngga ada kolom
filtered_data <- summer_olympic[!is.na(summer_olympic$Medal),]
sport_data <- filtered_data[filtered_data$Sport %in% "Archery", ]
country_data <- sport_data[sport_data$NOC %in% "EUN", ]
View(country_data)
filter_height <- country_data[!is.na(country_data$Height),]
if (nrow(filter_height) > 0) {
height_per_noc <- aggregate(Height ~ ISO, data = filter_height, FUN = function(x) round(mean(x), 2))
} else {
height_per_noc <- data.frame(ISO = character(), Height = numeric())
}
runApp('APP MAIN16 select valuenames.R')
runApp('APP MAIN16 select valuenames.R')
