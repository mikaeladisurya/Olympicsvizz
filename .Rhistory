library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP line02 slider.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
runApp('APP Layout05 reactivevalue.R')
runApp('APP Layout05 reactivevalue.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP Layout04 skeleton2.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN05 gameslider1.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/SUBMIT/OLYMPICS MAIN APP.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN07 bootstrap.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN08 host rank.R')
library(shiny); runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('APP MAIN12 histo reactive.R')
library(shiny); runApp('APP MAIN12 histo reactive.R')
setwd("F:/MONASH/Data Visualization/Ass/Ass1")
runApp('APP MAIN12 histo reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN11 scatter reactive.R')
runApp('APP MAIN12 histo reactive.R')
runApp('F:/MONASH/Data Visualization/Ass/Ass3/Olympics athlete stat/APP MAIN12 histo reactive.R')
setwd("F:/MONASH/Data Visualization/Ass/Ass3/Olympicsvizz")
library(shiny); runApp('OLYMPICS MAIN APP.R')
library(dplyr)
library(tidyverse)
# Loading athlete data
summer_olympic <- read.csv(paste0(getwd(),"/DATA/summer_olympics.csv"))
# Loading alphabetic country codes data
country_code <- read.csv(paste0(getwd(),"/DATA/alphabetic_country_codes.csv"))
# join athlete data with country codes to add iso3 country code
summer_olympic <-  merge(x = summer_olympic, y = country_code, by = "NOC", all.x = TRUE)
# delete NA row in ISO column
summer_olympic <- summer_olympic[!is.na(summer_olympic$ISO),]
#--------------------------------------------- Cari error kalo ngga ada kolom
filtered_data <- summer_olympic[!is.na(summer_olympic$Medal),]
data %>%
mutate(filtered_data = ifelse(test = Sex == "M", yes = -filtered_data, no = filtered_data)) %>%
mutate(abs_pop = abs(filtered_data)) %>%
plot_ly(x= ~filtered_data, y=~Age, color=~Sex) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~abs_pop) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(tickmode = 'array', tickvals = c(-15000, -10000, -5000, 0, 5000, 10000, 15000),
ticktext = c('15000', '10000', '5000', '0', '5000', '10000', '15000')))
library(plotly)
data %>%
mutate(filtered_data = ifelse(test = Sex == "M", yes = -filtered_data, no = filtered_data)) %>%
mutate(abs_pop = abs(filtered_data)) %>%
plot_ly(x= ~filtered_data, y=~Age, color=~Sex) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~abs_pop) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(tickmode = 'array', tickvals = c(-15000, -10000, -5000, 0, 5000, 10000, 15000),
ticktext = c('15000', '10000', '5000', '0', '5000', '10000', '15000')))
View(filtered_data)
filtered_data %>%
mutate(population = ifelse(test = Sex == "M", yes = -population, no = population)) %>%
mutate(abs_pop = abs(population)) %>%
plot_ly(x= ~population, y=~age, color=~Sex) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~abs_pop) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(tickmode = 'array', tickvals = c(-15000, -10000, -5000, 0, 5000, 10000, 15000),
ticktext = c('15000', '10000', '5000', '0', '5000', '10000', '15000')))
# Filter the data for male and female players
male_data <- subset(filtered_data, Sex == "M")
female_data <- subset(filtered_data, Sex == "F")
# Calculate the maximum frequency for setting the range of the y-axis
max_frequency <- max(hist(male_data$Age, plot = FALSE)$counts, hist(female_data$Age, plot = FALSE)$counts)
# Create the bar plots for male and female
plot_female <- plot_ly(female_data, y = ~Age, type = "histogram", orientation = "h", name = "Female",
histfunc = "count", marker = list(color = "rgba(255, 0, 0, 0.7)"),
nbinsy = 15)
plot_male <- plot_ly(male_data, y = ~Age, type = "histogram", name = "Male",
histfunc = "sum", marker = list(color = "rgba(0, 0, 255, 0.7)"),
nbinsy = 15)
# Combine the bar plots and layout
subplot(plot_female, plot_male, nrows = 1, shareY = TRUE,
margin = 0.05) %>%
layout(
title = "Age Distribution of Players",
xaxis = list(title = "Frequency", range = c(0, max_frequency)),
yaxis = list(title = "Age"),
bargap = 0.1,
legend = list(x = 0.1, y = 0.9)
)
# Combine the bar plots and layout
plot_ly(plot_female, plot_male) %>%
layout(
title = "Age Distribution of Players",
xaxis = list(title = "Frequency", range = c(0, max_frequency)),
yaxis = list(title = "Age"),
bargap = 0.1, barmode = 'overlay',
legend = list(x = 0.1, y = 0.9)
)
# Create the bar plots for male and female
plot_female <- plot_ly(female_data, y = ~Age, type = "histogram", orientation = "h", name = "Female",
histfunc = "count", marker = list(color = "rgba(255, 0, 0, 0.7)"),
nbinsy = 15)
plot_female
# Create the bar plots for male and female
plot_female <- plot_ly(female_data, y = ~Age, type = "histogram", orientation = "h", name = "Female",
histfunc = "count", marker = list(color = "rgba(255, 0, 0, 0.7)"),
nbinsy = 15)%>%
layout(
title = "Age Distribution of Players",
xaxis = list(title = "Frequency", range = c(0, max_frequency)),
yaxis = list(title = "Age"),
bargap = 0.1, barmode = 'overlay',
legend = list(x = 0.1, y = 0.9)
)
plot_female
plot_female <- add_trace(male_data, y = ~Age, type = "histogram", name = "Male",
histfunc = "sum", marker = list(color = "rgba(0, 0, 255, 0.7)"),
nbinsy = 15)
plot_female
# Create the bar plots for male and female
plot_female <- plot_ly(female_data, y = ~Age, type = "histogram",
histfunc = "count", marker = list(color = "rgba(255, 0, 0, 0.7)"),
nbinsy = 15)%>%
layout(
title = "Age Distribution of Players",
xaxis = list(title = "Frequency", range = c(0, max_frequency)),
yaxis = list(title = "Age"),
bargap = 0.1, barmode = 'overlay',
legend = list(x = 0.1, y = 0.9)
)
plot_female <- add_trace(male_data, y = ~Age,
histfunc = "sum", marker = list(color = "rgba(0, 0, 255, 0.7)"),
nbinsy = 15)
plot_female
# Create the bar plots for male and female
plot_female <- plot_ly(female_data, y = ~Age, type = "histogram",
histfunc = "count", marker = list(color = "rgba(255, 0, 0, 0.7)"),
nbinsy = 15)%>%
add_trace(male_data, y = ~Age,
histfunc = "sum", marker = list(color = "rgba(0, 0, 255, 0.7)"),
nbinsy = 15) %>%
layout(
title = "Age Distribution of Players",
xaxis = list(title = "Frequency", range = c(0, max_frequency)),
yaxis = list(title = "Age"),
bargap = 0.1, barmode = 'overlay',
legend = list(x = 0.1, y = 0.9)
)
plot_female
plot_overlay <- plot_ly(alpha = 0.6)
plot_overlay <- plot_overlay %>% add_histogram(x = male_data$Age)
plot_overlay <- plot_overlay %>% add_histogram(x = female_data$Age)
plot_overlay <- plot_overlay %>% layout(barmode = "overlay")
plot_overlay
plot_overlay <- plot_ly(alpha = 0.6)
plot_overlay <- plot_overlay %>% add_histogram(y = male_data$Age)
plot_overlay <- plot_overlay %>% add_histogram(y = female_data$Age)
plot_overlay <- plot_overlay %>% layout(barmode = "overlay")
plot_overlay
plot_overlay <- plot_ly(alpha = 0.6)
plot_overlay <- plot_overlay %>% add_histogram(y = male_data$Age, nbinsy = 15)
plot_overlay <- plot_overlay %>% add_histogram(y = female_data$Age, nbinsy = 15)
plot_overlay <- plot_overlay %>% layout(barmode = "overlay", range = c(-max_frequency, max_frequency))
plot_overlay
plot_overlay <- plot_ly(alpha = 0.6)
plot_overlay <- plot_overlay %>% add_histogram(y = male_data$Age, histfunc = "count", nbinsy = 15)
plot_overlay <- plot_overlay %>% add_histogram(y = female_data$Age, histfunc = "count", nbinsy = 15)
plot_overlay <- plot_overlay %>% layout(barmode = "overlay")
plot_overlay
plot_overlay <- plot_ly(alpha = 0.6)
plot_overlay <- plot_overlay %>% add_histogram(y = male_data$Age, histfunc = "count", nbinsy = 15)
plot_overlay <- plot_overlay %>% add_histogram(y = female_data$Age, histfunc = "-count", nbinsy = 15)
plot_overlay <- plot_overlay %>% layout(barmode = "overlay")
plot_overlay
plot_overlay <- plot_ly(alpha = 0.6)
plot_overlay <- plot_overlay %>% add_histogram(y = male_data$Age, histfunc = "count", nbinsy = 15)
plot_overlay <- plot_overlay %>% add_histogram(y = female_data$Age, histfunc = -"count", nbinsy = 15)
plot_overlay <- plot_overlay %>% layout(barmode = "overlay")
plot_overlay
filtered_data %>%
mutate(population = ifelse(Sex == "M", yes = -population, no = population)) %>%
mutate(abs_pop = abs(population)) %>%
plot_ly(x= ~population, y=~age, color=~Sex) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~abs_pop) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(tickmode = 'array', tickvals = c(-15000, -10000, -5000, 0, 5000, 10000, 15000),
ticktext = c('15000', '10000', '5000', '0', '5000', '10000', '15000')))
filtered_data %>%
mutate(population = ifelse(Sex == "M", yes = population*(-1), no = population*1)) %>%
mutate(abs_pop = abs(population)) %>%
plot_ly(x= ~population, y=~age, color=~Sex) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~abs_pop) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(tickmode = 'array', tickvals = c(-15000, -10000, -5000, 0, 5000, 10000, 15000),
ticktext = c('15000', '10000', '5000', '0', '5000', '10000', '15000')))
rlang::last_trace()
male_hist <- hist(filtered_data$Age, breaks = 15, plot = FALSE)$counts
male_hist <- hist(filtered_data$Age, breaks = 15, plot = FALSE)
View(male_hist)
male_hist <- hist(filtered_data$Age, plot = FALSE)
View(male_hist)
View(filtered_data)
male_hist <- hist(filtered_data$Age, breaks = 64, plot = FALSE)
View(male_hist)
male_unique <- unique(filtered_data$Age)
male_unique <- data.frame(unique(filtered_data$Age))
View(male_unique)
male_unique$age <- data.frame(unique(filtered_data$Age))
View(male_unique)
plot_overlay <- plot_ly(alpha = 0.6)
plot_overlay <- plot_overlay %>% add_histogram(y = male_data$Age, histfunc = "count", nbinsy = 15)
plot_overlay <- plot_overlay %>% add_histogram(y = female_data$Age, histfunc = "count", nbinsy = 15, reversescale =TRUE)
plot_overlay <- plot_overlay %>% layout(barmode = "overlay")
plot_overlay
plot_overlay <- plot_ly(alpha = 0.6)
plot_overlay <- plot_overlay %>% add_histogram(y = male_data$Age, histfunc = "count", nbinsy = 15)
plot_overlay <- plot_overlay %>% add_histogram(y = female_data$Age, histfunc = "count", nbinsy = 15)%>%
flip_coordinates(xaxis = "x")
plot_overlay <- plot_ly(alpha = 0.6)
plot_overlay <- plot_overlay %>% add_histogram(y = male_data$Age, histfunc = "count", nbinsy = 15)
plot_overlay <- plot_overlay %>% add_histogram(y = female_data$Age, histfunc = "count", nbinsy = 15)
plot_overlay <- plot_overlay %>% layout(barmode = "overlay", autorange = "reversed")
plot_overlay
plot_overlay <- plot_ly(alpha = 0.6)
plot_overlay <- plot_overlay %>% add_histogram(y = male_data$Age, histfunc = "count", nbinsy = 15)
plot_overlay <- plot_overlay %>% add_histogram(y = female_data$Age, histfunc = "count", nbinsy = 15)
plot_overlay <- plot_overlay %>% layout(barmode = "overlay",
xaxis = list(title = "Frequency", autorange = "reversed")
)
plot_overlay
runApp('OLYMPICS MAIN APP.R')
View(male_data)
attr_data <- filtered_data[, c("Age", "Sex")]
colnames(attr_data)[colnames(attr_data) == "Age"] <- "Property"
View(attr_data)
runApp('OLYMPICS MAIN APP.R')
attr_data <- filtered_data[, c("Age", "Sex")]
View(male_data)
runApp('OLYMPICS MAIN APP.R')
male_data <- subset(filtered_data(), Sex == "M")
male_data <- subset(filtered_data, Sex == "M")
filtered_data
male_data <- subset(filtered_data, Sex == "M")
View(filtered_data)
temp_data <- filtered_data[filtered_data$Sex == input$gender, ]
temp_data <- filtered_data[filtered_data$Sex == "M", ]
View(temp_data)
View(male_data)
male_data <- subset(filtered_data, Sex == "M")
library(plotly)
library(dplyr)
library(tidyverse)
